[1] 환경 설정

1. 일반 project 생성 -> maven 프로젝트 -> spring 프로젝트 설정

2. pom.xml에 문서에 spring 설정 정보 설정
	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.3.30.RELEASE</version>
		</dependency>
	</dependencies>
	
3. 코드 개발 및 실행을 통한 환경 셋팅 확인
	- 작업 단계
		1. library 셋팅
		2. spring 설정 파일 생성
		3. 자바코드 개발
		4. spring 설정에 등록
		5. 자바코드에서 spring 설정 정보를 활용해서 실행
		
		
[2] 사고하기
- 코드와 설정이 분리
1. db접속 정보 (jdbc)
	- dbinfo.properties
	- 파일명 가변적으로 설정 가능
	- 코드에서 read시 file명까지 read해서 각각의 속성값들 활용

2. jpa의 설정, 
	- persistence.xml 
	- file명 변경 불가
	- 코드에선 file 내부의 설정 정보만 read해서 사용

3. spring의 설정 파일
	- playdata.xml 
	- 파일명 가변적 설정 가능
	- 코드에서 read시 file명까지 read해서 각각의 속성값들 활용

[3] spring 기본 특징
	1. framework
		-최적화된 정형화된 구조
		-개발자는 해당 구조에 맞게 서비스 로직만 개발
		-표준화가 가능
		-자바 객체 생성 및 관리 따라서 tomcat처럼 container라고도 함
		-기본 타입 제외한 모든 참조 타입이 다 스프링 객체로 등록 가능
			-스프링이 관리하는 객체들은 "spring bean" 이라고 함
			-DAO와 service등 모두 다 spring baen으로 등록해서 사용
		
	2. 표준화 장점
		-특정 개발에게 종속적이지 않기 때문에 개발자 변수가 생겨도 프로젝트 유지에 문제 없음
		-자원 절약
			-인적 자원 절약, 유지보수 등의 자원 절약
			
	3. 질문
		-servlet와 jsp는 객체 생성 및 소멸을 tomcat(WAS) 내에서 관리
		-servlet 객체들을 관리하는 was는 web container 또는 servlet engine
		-단 web container는 servlet 스펙에 한해서만 객체 생성 및 관리
			-javax.servlet.http등의 package 관련 API
		-url 명명
			http://ip:port/context명/path?웹쿼리스트링
			http://ip:port/project명/path?웹쿼리스트링
			
	4. spring 버전업 되면서 장점
		-코드를 최대한 간소화
		-spring boot는 코드 간소화 + 개발 환경 설정 간소화


[4] 실습 단계

https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators


	1. People.java 만 spring bean 등록 

	
	2. People.java와 Car.java를 spring bean 등록
		-People의 멤버 변수로 Car 보유
		
		-가령
			가족 프로그램이라 가정
			하나의 자동차를 여러명의 가족이 공유
			People 객체는 다수 단 car 객체는 하나만 공유?
			People 당 car도 1:1
		
	*방식
	
	1. 생성자 활용한 spring bean 생성
	
	2. setter를 활용한 spring bean 생성
	
	 









		